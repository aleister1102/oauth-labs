# This Dockerfile can be re-used across all (most?) of the labs.

FROM golang:1.23.2-alpine3.19 AS build

EXPOSE 3000

# LAB_NUMBER should be the zero-padded lab number.
ARG LAB_NUMBER

# COMPONENT should be either 'server' or 'client'.
ARG COMPONENT

RUN test -n "$LAB_NUMBER" || (echo "build argument LAB_NUMBER not set" && false)
RUN test -n "$COMPONENT" || (echo "build argument COMPONENT not set" && false)

ENV CGO_ENABLED=0
ENV GOPATH=/go
ENV GOCACHE=/root/.cache/go-build
ENV GOSU_VERSION 1.17
RUN set -eux; \
	\
	apk add --no-cache --virtual .gosu-deps \
		ca-certificates \
		dpkg \
		gnupg \
	; \
	\
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	\
# verify the signature
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	\
# clean up fetch dependencies
	apk del --no-network .gosu-deps; \
	\
	chmod +x /usr/local/bin/gosu; \
# verify that the binary works
	gosu --version; \
	gosu nobody true

WORKDIR /go/src/github.com/cydave/oauth-labs

COPY ./oalib/ /go/src/github.com/cydave/oauth-labs/oalib

COPY ./lab$LAB_NUMBER/$COMPONENT/go.mod ./lab$LAB_NUMBER/$COMPONENT/go.sum /go/src/github.com/cydave/oauth-labs/lab$LAB_NUMBER/$COMPONENT/
RUN cd ./lab$LAB_NUMBER/$COMPONENT \
    && go mod download

COPY ./lab$LAB_NUMBER/$COMPONENT ./lab$LAB_NUMBER/$COMPONENT
RUN --mount=type=cache,target="/root/.cache/go-build" \
    cd "./lab$LAB_NUMBER/$COMPONENT" \
    && go build -mod=readonly -ldflags="-s -w" -o /app/server ./cmd/server/main.go


FROM golang:1.23.2-alpine3.19 AS final

WORKDIR /app

COPY --from=build /app/server /app/server
COPY --from=build /usr/local/bin/gosu /usr/local/bin/gosu
COPY ./docker/entrypoint.sh /docker-entrypoint.sh

RUN addgroup -S user -g 1000 \
    && adduser -S user -G user -u 1000 \
    && chown -R user:user /app \
    && chown root:root /docker-entrypoint.sh \
    && chmod 755 /docker-entrypoint.sh

ENTRYPOINT ["/docker-entrypoint.sh"]
